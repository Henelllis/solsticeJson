{"version":3,"sources":["features/tableState/tableStateSlice.ts","components/SolsticeTable/Header/index.tsx","components/SolsticeTable/ToolBar/index.tsx","components/SolsticeTable/Body/index.tsx","features/tableState/AccountTable.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["tableSlice","createSlice","name","initialState","value","loading","customers","accounts","reducers","state","populateCustomers","action","payload","populateAccounts","actions","apiGateway","selectAccounts","tableState","selectCustomers","useStyles","makeStyles","visuallyHidden","border","clip","height","margin","overflow","padding","position","top","width","SolsticeTableHeader","props","classes","headAccountCells","headCustomerCells","onAccountRequestSort","onCustomerRequestSort","order","orderByAccount","orderByCustomer","tabletype","TableHead","TableRow","map","headCell","TableCell","key","id","align","numeric","disablePadding","sortDirection","TableSortLabel","active","direction","onClick","property","event","label","className","title","flex","SolsticeTableToolbar","Toolbar","Typography","variant","component","SolsticeTableBody","orderBy","page","rowsPerPage","rows","stableSort","array","comparator","stabilizedThis","el","index","sort","a","b","getComparator","descendingComparator","emptyRows","Math","min","length","sortedRows","TableBody","slice","row","first_name","last_name","email","account_manager_id","reason_for_joining","created_date","customer_id","address","city","zip_code","solar_farm_id","capacity_share","style","colSpan","paper","button","backgroundColor","AccountTable","useSelector","dispatch","useDispatch","React","useState","setOrder","setTabletype","setOrderByCustomer","setOrderByAccount","setPage","setRowsPerPage","useEffect","fetch","method","headers","Headers","json","Button","Paper","TableContainer","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","parseInt","target","CircularProgress","rootApp","background","minHeight","tableGridContainer","paddingTop","App","Grid","container","item","xs","justify","store","configureStore","reducer","tableStateReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gRAmBaA,EAAaC,YAAY,CACpCC,KAAM,aACNC,aATiC,CACjCC,MAAO,EACPC,SAAS,EACTC,UAAW,GACXC,SAAU,IAMVC,SAAU,CACRH,QAAS,SAACI,GACRA,EAAMJ,SAAWI,EAAMJ,SAEzBK,kBAAmB,SAACD,EAAOE,GACzBF,EAAMH,UAAYK,EAAOC,SAE3BC,iBAAkB,SAACJ,EAAOE,GACxBF,EAAMF,SAAWI,EAAOC,Y,EAS1BZ,EAAWc,QAHbT,E,EAAAA,QACAQ,E,EAAAA,iBACAH,E,EAAAA,kBAGIK,EAAa,6DA+BNC,EAAiB,SAACP,GAAD,OAAsBA,EAAMQ,WAAWV,UACxDW,EAAkB,SAACT,GAAD,OAAsBA,EAAMQ,WAAWX,WAEvDN,IAAf,Q,wFC7DMmB,EAAYC,YAAW,CAC3BC,eAAgB,CACdC,OAAQ,EACRC,KAAM,gBACNC,OAAQ,EACRC,QAAS,EACTC,SAAU,SACVC,QAAS,EACTC,SAAU,WACVC,IAAK,GACLC,MAAO,KA8GIC,MAxFf,SAA6BC,GAC3B,IAAMC,EAAUd,IAEde,EAQEF,EARFE,iBACAC,EAOEH,EAPFG,kBACAC,EAMEJ,EANFI,qBACAC,EAKEL,EALFK,sBACAC,EAIEN,EAJFM,MACAC,EAGEP,EAHFO,eACAC,EAEER,EAFFQ,gBAgBF,MAAkB,aAddR,EADFS,UAiBE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACGR,EAAkBS,KAAI,SAACC,GAAD,OACrB,kBAACC,EAAA,EAAD,CACEC,IAAKF,EAASG,GACdC,MAAOJ,EAASK,QAAU,QAAU,OACpCvB,QAASkB,EAASM,eAAiB,OAAS,UAC5CC,cAAeZ,IAAoBK,EAASG,IAAKV,GAEjD,kBAACe,EAAA,EAAD,CACEC,OAAQd,IAAoBK,EAASG,GACrCO,UAAWf,IAAoBK,EAASG,GAAKV,EAAQ,MACrDkB,SA1BqBC,EA0BcZ,EAASG,GA1BM,SAC9DU,GAEArB,EAAsBqB,EAAOD,MAyBhBZ,EAASc,MACTnB,IAAoBK,EAASG,GAC5B,0BAAMY,UAAW3B,EAAQZ,gBACZ,SAAViB,EACG,oBACA,oBAEJ,OAnCgB,IAACmB,OA4C/B,kBAACf,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACGT,EAAiBU,KAAI,SAACC,GAAD,OACpB,kBAACC,EAAA,EAAD,CACEC,IAAKF,EAASG,GACdC,MAAOJ,EAASK,QAAU,QAAU,OACpCvB,QAASkB,EAASM,eAAiB,OAAS,UAC5CC,cAAeb,IAAmBM,EAASG,IAAKV,GAEhD,kBAACe,EAAA,EAAD,CACEC,OAAQf,IAAmBM,EAASG,GACpCO,UAAWhB,IAAmBM,EAASG,GAAKV,EAAQ,MACpDkB,SAlDoBC,EAkDcZ,EAASG,GAlDK,SAC5DU,GAEAtB,EAAqBsB,EAAOD,MAiDfZ,EAASc,MACTpB,IAAmBM,EAASG,GAC3B,0BAAMY,UAAW3B,EAAQZ,gBACZ,SAAViB,EACG,oBACA,oBAEJ,OA3De,IAACmB,Q,kBC5D9BtC,EAAYC,YAAW,CAC3ByC,MAAO,CACLC,KAAM,cAiCKC,MAlBf,SAA8B/B,GAC5B,IAAMC,EAAUd,IACR0C,EAAU7B,EAAV6B,MAER,OACE,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEL,UAAW3B,EAAQ4B,MACnBK,QAAQ,KACRlB,GAAG,aACHmB,UAAU,OAETN,K,SC5BH1C,EAAYC,YAAW,CAC3ByC,MAAO,CACLC,KAAM,cA8GKM,MAjGf,SAA2BpC,GACTb,IAAhB,IACQmB,EAAuDN,EAAvDM,MAAO+B,EAAgDrC,EAAhDqC,QAASC,EAAuCtC,EAAvCsC,KAAMC,EAAiCvC,EAAjCuC,YAAaC,EAAoBxC,EAApBwC,KAAM/B,EAAcT,EAAdS,UAEjD,SAASgC,EAAcC,EAAYC,GACjC,IAAMC,EAAiBF,EAAM9B,KAAI,SAACiC,EAAIC,GAAL,MAAe,CAACD,EAAIC,MAMrD,OALAF,EAAeG,MAAK,SAACC,EAAGC,GACtB,IAAM3C,EAAQqC,EAAWK,EAAE,GAAIC,EAAE,IACjC,OAAc,IAAV3C,EAAoBA,EACjB0C,EAAE,GAAKC,EAAE,MAEXL,EAAehC,KAAI,SAACiC,GAAD,OAAQA,EAAG,MAGvC,SAASK,EACP5C,EACA+B,GAKA,MAAiB,SAAV/B,EACH,SAAC0C,EAAGC,GAAJ,OAAUE,EAAqBH,EAAGC,EAAGZ,IACrC,SAACW,EAAGC,GAAJ,OAAWE,EAAqBH,EAAGC,EAAGZ,IAG5C,SAASc,EAAwBH,EAAMC,EAAMZ,GAC3C,OAAIY,EAAEZ,GAAWW,EAAEX,IACT,EAENY,EAAEZ,GAAWW,EAAEX,GACV,EAEF,EAET,IAAMe,EACJb,EAAcc,KAAKC,IAAIf,EAAaC,EAAKe,OAASjB,EAAOC,GACvDiB,EAAoB,GAaxB,OAXEA,EAAaf,EACXD,EACAU,EAAc5C,EAAO+B,IAUvB,kBAACoB,EAAA,EAAD,KACGD,EACEE,MAAMpB,EAAOC,EAAaD,EAAOC,EAAcA,GAC/C3B,KAAI,SAAC+C,EAAKb,GACI,kCAA8BA,GA+B3C,MA5BkB,aAAdrC,EAEA,kBAACE,EAAA,EAAD,CAAUI,IAAK4C,EAAI3C,IACjB,kBAACF,EAAA,EAAD,KAAY6C,EAAI3C,IAChB,kBAACF,EAAA,EAAD,CAAWG,MAAM,SAAS0C,EAAIC,YAC9B,kBAAC9C,EAAA,EAAD,CAAWG,MAAM,SAAS0C,EAAIE,WAC9B,kBAAC/C,EAAA,EAAD,CAAWG,MAAM,SAAS0C,EAAIG,OAC9B,kBAAChD,EAAA,EAAD,CAAWG,MAAM,SAAjB,UAA6B0C,EAAIrC,SACjC,kBAACR,EAAA,EAAD,CAAWG,MAAM,SAAS0C,EAAII,oBAC9B,kBAACjD,EAAA,EAAD,CAAWG,MAAM,SAAS0C,EAAIK,oBAC9B,kBAAClD,EAAA,EAAD,CAAWG,MAAM,SAAS0C,EAAIM,eAKhC,kBAACtD,EAAA,EAAD,CAAUI,IAAK4C,EAAI3C,IACjB,kBAACF,EAAA,EAAD,KAAY6C,EAAI3C,IAChB,kBAACF,EAAA,EAAD,CAAWG,MAAM,SAAS0C,EAAIO,aAC9B,kBAACpD,EAAA,EAAD,CAAWG,MAAM,SAAS0C,EAAIQ,SAC9B,kBAACrD,EAAA,EAAD,CAAWG,MAAM,SAAS0C,EAAIS,MAC9B,kBAACtD,EAAA,EAAD,CAAWG,MAAM,SAAS0C,EAAIU,UAC9B,kBAACvD,EAAA,EAAD,CAAWG,MAAM,SAAS0C,EAAIW,eAC9B,kBAACxD,EAAA,EAAD,CAAWG,MAAM,SAAS0C,EAAIY,gBAC9B,kBAACzD,EAAA,EAAD,CAAWG,MAAM,SAAS0C,EAAIM,kBAOvCb,EAAY,GACX,kBAACzC,EAAA,EAAD,CAAU6D,MAAO,CAAEhF,OAAQ,GAAK4D,IAC9B,kBAACtC,EAAA,EAAD,CAAW2D,QAAS,OC1FxBtF,EAAYC,YAAW,CAC3BsF,MAAO,CACL5E,MAAO,QAET6E,OAAQ,CACNC,gBAAiB,QACjB,UAAW,CACTA,gBAAiB,4BAmBjB1E,EAAsC,CAC1C,CAAEc,GAAI,KAAME,SAAS,EAAMC,gBAAgB,EAAOQ,MAAO,cACzD,CACEX,GAAI,cACJE,SAAS,EACTC,gBAAgB,EAChBQ,MAAO,eAET,CAAEX,GAAI,UAAWE,SAAS,EAAOC,gBAAgB,EAAOQ,MAAO,WAC/D,CAAEX,GAAI,OAAQE,SAAS,EAAOC,gBAAgB,EAAOQ,MAAO,QAC5D,CAAEX,GAAI,WAAYE,SAAS,EAAOC,gBAAgB,EAAOQ,MAAO,YAChE,CACEX,GAAI,gBACJE,SAAS,EACTC,gBAAgB,EAChBQ,MAAO,iBAET,CACEX,GAAI,iBACJE,SAAS,EACTC,gBAAgB,EAChBQ,MAAO,kBAET,CACEX,GAAI,eACJE,SAAS,EACTC,gBAAgB,EAChBQ,MAAO,iBAILxB,EAAwC,CAC5C,CAAEa,GAAI,KAAME,SAAS,EAAOC,gBAAgB,EAAOQ,MAAO,eAC1D,CACEX,GAAI,aACJE,SAAS,EACTC,gBAAgB,EAChBQ,MAAO,cAET,CACEX,GAAI,YACJE,SAAS,EACTC,gBAAgB,EAChBQ,MAAO,aAET,CAAEX,GAAI,QAASE,SAAS,EAAOC,gBAAgB,EAAOQ,MAAO,SAC7D,CAAEX,GAAI,SAAUE,SAAS,EAAOC,gBAAgB,EAAOQ,MAAO,aAC9D,CACEX,GAAI,qBACJE,SAAS,EACTC,gBAAgB,EAChBQ,MAAO,mBAET,CACEX,GAAI,qBACJE,SAAS,EACTC,gBAAgB,EAChBQ,MAAO,sBAET,CACEX,GAAI,eACJE,SAAS,EACTC,gBAAgB,EAChBQ,MAAO,gBAMJ,SAASkD,IACd,IAAMvG,EAAYwG,YAAY5F,GACxBX,EAAWuG,YAAY9F,GAEvB+F,EAAWC,cACX/E,EAAUd,IALa,EAOH8F,IAAMC,SAAgB,OAPnB,mBAOtB5E,EAPsB,KAOf6E,EAPe,OAQKF,IAAMC,SACtC,WAT2B,mBAQtBzE,EARsB,KAQX2E,EARW,OAYiBH,IAAMC,SAClD,MAb2B,mBAYtB1E,EAZsB,KAYL6E,EAZK,OAeeJ,IAAMC,SAChD,MAhB2B,mBAetB3E,EAfsB,KAeN+E,EAfM,OAmBLL,IAAMC,SAAS,GAnBV,mBAmBtB5C,EAnBsB,KAmBhBiD,EAnBgB,OAoBSN,IAAMC,SAAS,GApBxB,mBAoBtB3C,EApBsB,KAoBTiD,EApBS,KAwD7B,OALAC,qBAAU,WACRV,EJhHwB,uCAAgB,WAAOA,GAAP,eAAA/B,EAAA,6DAC1C+B,EAAS1G,KADiC,SAGlBqH,MAAM,GAAD,OAAI3G,EAAJ,cAA4B,CACvD4G,OAAQ,MACRC,QAAS,IAAIC,QAAQ,CACnB,eAAgB,uBANsB,cAGpCvH,EAHoC,YAU1CyG,EAV0C,KAUjCrG,EAViC,SAURJ,EAAUwH,OAVF,sDAW1Cf,EAAS1G,KAXiC,4CAAhB,uDIiHxB0G,EJ/HuB,uCAAgB,WAAOA,GAAP,eAAA/B,EAAA,6DACzC+B,EAAS1G,KADgC,SAGlBqH,MAAM,GAAD,OAAI3G,EAAJ,aAA2B,CACrD4G,OAAQ,MACRC,QAAS,IAAIC,QAAQ,CACnB,eAAgB,uBANqB,cAGnCtH,EAHmC,YAUzCwG,EAVyC,KAUhClG,EAVgC,SAURN,EAASuH,OAVD,sDAWzCf,EAAS1G,KAXgC,4CAAhB,yDIgItB,IAEEC,GAAcC,EAIf,oCACE,kBAACwH,EAAA,EAAD,CACEnE,UAAW3B,EAAQ0E,OACnBnD,QAAS,WAEH4D,EADU,aAAd3E,EACiB,UACA,cALrB,oBAQgB,aAAdA,EAA2B,WAAa,YAR1C,WAUA,kBAACuF,EAAA,EAAD,CAAOpE,UAAW3B,EAAQyE,OACxB,kBAACuB,EAAA,EAAD,CAAgBzB,MAAO,CAAE1E,MAAO,OAC9B,kBAAC,EAAD,CACE+B,MAAqB,aAAdpB,EAA2B,YAAc,aAElD,kBAAC,EAAD,CACEH,MAAOA,EACPE,gBAAiBA,EACjBD,eAAgBA,EAChBF,sBA1DsB,SAChCqB,EACAD,GAGA0D,EADc3E,IAAoBiB,GAAsB,QAAVnB,EAC7B,OAAS,OAC1B+E,EAAmB5D,IAqDTrB,qBAlDqB,SAC/BsB,EACAD,GAGA0D,EADc5E,IAAmBkB,GAAsB,QAAVnB,EAC5B,OAAS,OAC1BgF,EAAkB7D,IA6CRvB,iBAAkBA,EAClBC,kBAAmBA,EACnBM,UAAWA,IAEb,kBAAC,EAAD,CACEH,MAAOA,EACP+B,QACgB,aAAd5B,EAA2BD,EAAkBD,EAE/C+B,KAAMA,EACNE,KAAoB,aAAd/B,EAA2BnC,EAAYC,EAC7CgE,YAAaA,EACb9B,UAAWA,IAEb,kBAACyF,EAAA,EAAD,CACEC,mBAAoB,CAAC,EAAG,GAAI,IAC5BhE,UAAU,MACViE,MAAO9H,EAAUiF,OACjBhB,YAAaA,EACbD,KAAMA,EACN+D,aA9Da,SAAC3E,EAAgB4E,GACxCf,EAAQe,IA8DEC,oBA3DoB,SAC9B7E,GAEA8D,EAAegB,SAAS9E,EAAM+E,OAAOrI,MAAO,KAC5CmH,EAAQ,SASD,kBAACmB,EAAA,EAAD,M,sBCxKLvH,EAAYC,YAAW,CAC3BuH,QAAS,CACPC,WAAY,SACZC,UAAW,QACX/G,MAAO,SAETgH,mBAAoB,CAClBC,WAAY,SAmBDC,MAff,WACE,IAAM/G,EAAUd,IAChB,OACE,kBAAC8H,EAAA,EAAD,CAAMC,WAAS,EAACtF,UAAW3B,EAAQ0G,SACjC,kBAACM,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACH,EAAA,EAAD,CAAMC,WAAS,EAACtF,UAAW3B,EAAQ6G,mBAAoBO,QAAQ,UAC7D,kBAACJ,EAAA,EAAD,CAAME,MAAI,GACR,kBAACtC,EAAD,WCpBCyC,EAAQC,YAAe,CAClCC,QAAS,CACPvI,WAAYwI,KCOIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUX,MAAOA,GACf,kBAAC,EAAD,QAGJY,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f87b01a9.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { AppThunk, RootState } from \"../../app/store\";\r\n// import axios from \"axios\";\r\nimport { Customer, Account } from \"solstice-common\";\r\n\r\ninterface CounterState {\r\n  value: number;\r\n  loading: boolean;\r\n  customers: Customer[] | null;\r\n  accounts: Account[] | null;\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n  loading: false,\r\n  customers: [],\r\n  accounts: [],\r\n};\r\n\r\nexport const tableSlice = createSlice({\r\n  name: \"tableState\",\r\n  initialState,\r\n  reducers: {\r\n    loading: (state) => {\r\n      state.loading = !state.loading;\r\n    },\r\n    populateCustomers: (state, action: PayloadAction<Customer[]>) => {\r\n      state.customers = action.payload;\r\n    },\r\n    populateAccounts: (state, action: PayloadAction<Account[]>) => {\r\n      state.accounts = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  loading,\r\n  populateAccounts,\r\n  populateCustomers,\r\n} = tableSlice.actions;\r\n\r\nconst apiGateway = \"https://v2u3eaqpc2.execute-api.us-east-1.amazonaws.com/dev\";\r\nexport const getAccounts = (): AppThunk => async (dispatch) => {\r\n  dispatch(loading());\r\n\r\n  const accounts = await fetch(`${apiGateway}/accounts`, {\r\n    method: \"GET\",\r\n    headers: new Headers({\r\n      \"Content-Type\": \"application/json\",\r\n    }),\r\n  });\r\n\r\n  dispatch(populateAccounts((await accounts.json()) as Account[]));\r\n  dispatch(loading());\r\n};\r\n\r\nexport const getCustomers = (): AppThunk => async (dispatch) => {\r\n  dispatch(loading());\r\n\r\n  const customers = await fetch(`${apiGateway}/customers`, {\r\n    method: \"GET\",\r\n    headers: new Headers({\r\n      \"Content-Type\": \"application/json\",\r\n    }),\r\n  });\r\n\r\n  dispatch(populateCustomers((await customers.json()) as Customer[]));\r\n  dispatch(loading());\r\n};\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectAccounts = (state: RootState) => state.tableState.accounts;\r\nexport const selectCustomers = (state: RootState) => state.tableState.customers;\r\n\r\nexport default tableSlice.reducer;\r\n","import React from \"react\";\nimport {\n  TableCell,\n  TableHead,\n  TableSortLabel,\n  TableRow,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { Account, Customer } from \"solstice-common\";\nimport {\n  Order,\n  HeadAccountCell,\n  HeadCustomerCell,\n} from \"../../../features/tableState/AccountTable\";\nconst useStyles = makeStyles({\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n});\n\ninterface SolsticeHeaderProps {\n  onCustomerRequestSort: (\n    event: React.MouseEvent<unknown>,\n    property: keyof Customer\n  ) => void;\n  onAccountRequestSort: (\n    event: React.MouseEvent<unknown>,\n    property: keyof Account\n  ) => void;\n  order: Order;\n  orderByCustomer: string;\n  orderByAccount: string;\n\n  headCustomerCells: HeadCustomerCell[];\n  headAccountCells: HeadAccountCell[];\n  tabletype: \"account\" | \"customer\";\n}\n\nfunction SolsticeTableHeader(props: SolsticeHeaderProps) {\n  const classes = useStyles();\n  const {\n    headAccountCells,\n    headCustomerCells,\n    onAccountRequestSort,\n    onCustomerRequestSort,\n    order,\n    orderByAccount,\n    orderByCustomer,\n    tabletype,\n  } = props;\n\n  const createCustomerSortHandler = (property: keyof Customer) => (\n    event: React.MouseEvent<unknown>\n  ) => {\n    onCustomerRequestSort(event, property);\n  };\n\n  const createAccountSortHandler = (property: keyof Account) => (\n    event: React.MouseEvent<unknown>\n  ) => {\n    onAccountRequestSort(event, property);\n  };\n\n  if (tabletype === \"customer\") {\n    return (\n      <TableHead>\n        <TableRow>\n          {headCustomerCells.map((headCell) => (\n            <TableCell\n              key={headCell.id}\n              align={headCell.numeric ? \"right\" : \"left\"}\n              padding={headCell.disablePadding ? \"none\" : \"default\"}\n              sortDirection={orderByCustomer === headCell.id ? order : false}\n            >\n              <TableSortLabel\n                active={orderByCustomer === headCell.id}\n                direction={orderByCustomer === headCell.id ? order : \"asc\"}\n                onClick={createCustomerSortHandler(headCell.id)}\n              >\n                {headCell.label}\n                {orderByCustomer === headCell.id ? (\n                  <span className={classes.visuallyHidden}>\n                    {order === \"desc\"\n                      ? \"sorted descending\"\n                      : \"sorted ascending\"}\n                  </span>\n                ) : null}\n              </TableSortLabel>\n            </TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n    );\n  } else {\n    return (\n      <TableHead>\n        <TableRow>\n          {headAccountCells.map((headCell) => (\n            <TableCell\n              key={headCell.id}\n              align={headCell.numeric ? \"right\" : \"left\"}\n              padding={headCell.disablePadding ? \"none\" : \"default\"}\n              sortDirection={orderByAccount === headCell.id ? order : false}\n            >\n              <TableSortLabel\n                active={orderByAccount === headCell.id}\n                direction={orderByAccount === headCell.id ? order : \"asc\"}\n                onClick={createAccountSortHandler(headCell.id)}\n              >\n                {headCell.label}\n                {orderByAccount === headCell.id ? (\n                  <span className={classes.visuallyHidden}>\n                    {order === \"desc\"\n                      ? \"sorted descending\"\n                      : \"sorted ascending\"}\n                  </span>\n                ) : null}\n              </TableSortLabel>\n            </TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n    );\n  }\n}\n\nexport default SolsticeTableHeader;\n","import React from \"react\";\nimport { Toolbar, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { Customer } from \"solstice-common\";\n\nconst useStyles = makeStyles({\n  title: {\n    flex: \"1 1 100%\",\n  },\n});\n\ninterface HeadCell {\n  disablePadding: boolean;\n  id: keyof Customer;\n  label: string;\n  numeric: boolean;\n}\n\ninterface SolsticeHeaderProps {\n  title: string;\n}\n\nfunction SolsticeTableToolbar(props: SolsticeHeaderProps) {\n  const classes = useStyles();\n  const { title } = props;\n\n  return (\n    <Toolbar>\n      <Typography\n        className={classes.title}\n        variant=\"h6\"\n        id=\"tableTitle\"\n        component=\"div\"\n      >\n        {title}\n      </Typography>\n    </Toolbar>\n  );\n}\n\nexport default SolsticeTableToolbar;\n","import React from \"react\";\nimport { TableBody, TableCell, TableRow } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { Customer, Account } from \"solstice-common\";\nimport { Order } from \"../../../features/tableState/AccountTable\";\n\nconst useStyles = makeStyles({\n  title: {\n    flex: \"1 1 100%\",\n  },\n});\n\ninterface SolsticeBodyProps {\n  order: Order;\n  orderBy: keyof Customer | keyof Account;\n  page: number;\n  rowsPerPage: number;\n  rows: Customer[] | Account[];\n  tabletype: \"customer\" | \"account\";\n}\n\nfunction SolsticeTableBody(props: SolsticeBodyProps) {\n  const classes = useStyles();\n  const { order, orderBy, page, rowsPerPage, rows, tabletype } = props;\n\n  function stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\n    const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\n    stabilizedThis.sort((a, b) => {\n      const order = comparator(a[0], b[0]);\n      if (order !== 0) return order;\n      return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n  }\n\n  function getComparator<Key extends keyof any>(\n    order: Order,\n    orderBy: Key\n  ): (\n    a: { [key in Key]: number | string | boolean | null },\n    b: { [key in Key]: number | string | boolean | null }\n  ) => number {\n    return order === \"desc\"\n      ? (a, b) => descendingComparator(a, b, orderBy)\n      : (a, b) => -descendingComparator(a, b, orderBy);\n  }\n\n  function descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n    if (b[orderBy] < a[orderBy]) {\n      return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n      return 1;\n    }\n    return 0;\n  }\n  const emptyRows =\n    rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n  let sortedRows: any[] = [];\n  if (tabletype === \"customer\") {\n    sortedRows = stableSort<Customer>(\n      rows as Customer[],\n      getComparator(order, orderBy as keyof Customer)\n    );\n  } else {\n    sortedRows = stableSort<Account>(\n      rows as Account[],\n      getComparator(order, orderBy as keyof Account)\n    );\n  }\n\n  return (\n    <TableBody>\n      {sortedRows\n        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n        .map((row, index) => {\n          const labelId = `enhanced-table-checkbox-${index}`;\n\n          let renderRow: any;\n          if (tabletype === \"customer\") {\n            renderRow = (\n              <TableRow key={row.id}>\n                <TableCell>{row.id}</TableCell>\n                <TableCell align=\"right\">{row.first_name}</TableCell>\n                <TableCell align=\"right\">{row.last_name}</TableCell>\n                <TableCell align=\"right\">{row.email}</TableCell>\n                <TableCell align=\"right\">{`${row.active}`}</TableCell>\n                <TableCell align=\"right\">{row.account_manager_id}</TableCell>\n                <TableCell align=\"right\">{row.reason_for_joining}</TableCell>\n                <TableCell align=\"right\">{row.created_date}</TableCell>\n              </TableRow>\n            );\n          } else {\n            renderRow = (\n              <TableRow key={row.id}>\n                <TableCell>{row.id}</TableCell>\n                <TableCell align=\"right\">{row.customer_id}</TableCell>\n                <TableCell align=\"right\">{row.address}</TableCell>\n                <TableCell align=\"right\">{row.city}</TableCell>\n                <TableCell align=\"right\">{row.zip_code}</TableCell>\n                <TableCell align=\"right\">{row.solar_farm_id}</TableCell>\n                <TableCell align=\"right\">{row.capacity_share}</TableCell>\n                <TableCell align=\"right\">{row.created_date}</TableCell>\n              </TableRow>\n            );\n          }\n\n          return renderRow;\n        })}\n      {emptyRows > 0 && (\n        <TableRow style={{ height: 53 * emptyRows }}>\n          <TableCell colSpan={6} />\n        </TableRow>\n      )}\n    </TableBody>\n  );\n}\n\nexport default SolsticeTableBody;\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  selectCustomers,\r\n  getCustomers,\r\n  getAccounts,\r\n  selectAccounts,\r\n} from \"./tableStateSlice\";\r\nimport {\r\n  Button,\r\n  CircularProgress,\r\n  Paper,\r\n  TableContainer,\r\n  TablePagination,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport SolsticeHeader from \"../../components/SolsticeTable/Header\";\r\nimport SolsticeToolbar from \"../../components/SolsticeTable/ToolBar\";\r\nimport SolsticeTableBody from \"../../components/SolsticeTable/Body\";\r\n\r\nimport { Customer, Account } from \"solstice-common\";\r\nconst useStyles = makeStyles({\r\n  paper: {\r\n    width: \"100%\",\r\n  },\r\n  button: {\r\n    backgroundColor: \"coral\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"rgb(7, 177, 77, 0.42)\",\r\n    },\r\n  },\r\n});\r\n\r\nexport interface HeadCell {\r\n  disablePadding: boolean;\r\n  id: keyof any;\r\n  label: string;\r\n  numeric: boolean;\r\n}\r\nexport interface HeadCustomerCell extends HeadCell {\r\n  id: keyof Customer;\r\n}\r\n\r\nexport interface HeadAccountCell extends HeadCell {\r\n  id: keyof Account;\r\n}\r\n\r\nconst headAccountCells: HeadAccountCell[] = [\r\n  { id: \"id\", numeric: true, disablePadding: false, label: \"Account id\" },\r\n  {\r\n    id: \"customer_id\",\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: \"Customer id\",\r\n  },\r\n  { id: \"address\", numeric: false, disablePadding: false, label: \"Address\" },\r\n  { id: \"city\", numeric: false, disablePadding: false, label: \"City\" },\r\n  { id: \"zip_code\", numeric: false, disablePadding: false, label: \"Zip Code\" },\r\n  {\r\n    id: \"solar_farm_id\",\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: \"Solar Farm Id\",\r\n  },\r\n  {\r\n    id: \"capacity_share\",\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: \"Capacity Share\",\r\n  },\r\n  {\r\n    id: \"created_date\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Created Date\",\r\n  },\r\n];\r\n\r\nconst headCustomerCells: HeadCustomerCell[] = [\r\n  { id: \"id\", numeric: false, disablePadding: false, label: \"Customer id\" },\r\n  {\r\n    id: \"first_name\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"First Name\",\r\n  },\r\n  {\r\n    id: \"last_name\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Last Name\",\r\n  },\r\n  { id: \"email\", numeric: false, disablePadding: false, label: \"Email\" },\r\n  { id: \"active\", numeric: false, disablePadding: false, label: \"Is Active\" },\r\n  {\r\n    id: \"account_manager_id\",\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: \"Account Manager\",\r\n  },\r\n  {\r\n    id: \"reason_for_joining\",\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: \"Reason For Joining\",\r\n  },\r\n  {\r\n    id: \"created_date\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"CreatedDate\",\r\n  },\r\n];\r\n\r\nexport type Order = \"asc\" | \"desc\";\r\n\r\nexport function AccountTable() {\r\n  const customers = useSelector(selectCustomers);\r\n  const accounts = useSelector(selectAccounts);\r\n\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n\r\n  const [order, setOrder] = React.useState<Order>(\"asc\");\r\n  const [tabletype, setTabletype] = React.useState<\"customer\" | \"account\">(\r\n    \"account\"\r\n  );\r\n\r\n  const [orderByCustomer, setOrderByCustomer] = React.useState<keyof Customer>(\r\n    \"id\"\r\n  );\r\n  const [orderByAccount, setOrderByAccount] = React.useState<keyof Account>(\r\n    \"id\"\r\n  );\r\n\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const handleCustomerRequestSort = (\r\n    event: React.MouseEvent<unknown>,\r\n    property: keyof Customer\r\n  ) => {\r\n    const isAsc = orderByCustomer === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderByCustomer(property);\r\n  };\r\n\r\n  const handleAccountRequestSort = (\r\n    event: React.MouseEvent<unknown>,\r\n    property: keyof Account\r\n  ) => {\r\n    const isAsc = orderByAccount === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderByAccount(property);\r\n  };\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getCustomers());\r\n    dispatch(getAccounts());\r\n  }, []);\r\n\r\n  if (!customers || !accounts) {\r\n    return <CircularProgress />;\r\n  } else {\r\n    return (\r\n      <>\r\n        <Button\r\n          className={classes.button}\r\n          onClick={() => {\r\n            tabletype === \"customer\"\r\n              ? setTabletype(\"account\")\r\n              : setTabletype(\"customer\");\r\n          }}\r\n        >{`Switch to ${\r\n          tabletype === \"customer\" ? \"Accounts\" : \"Customers\"\r\n        } Table`}</Button>\r\n        <Paper className={classes.paper}>\r\n          <TableContainer style={{ width: 1200 }}>\r\n            <SolsticeToolbar\r\n              title={tabletype === \"customer\" ? \"Customers\" : \"Accounts\"}\r\n            />\r\n            <SolsticeHeader\r\n              order={order}\r\n              orderByCustomer={orderByCustomer}\r\n              orderByAccount={orderByAccount}\r\n              onCustomerRequestSort={handleCustomerRequestSort}\r\n              onAccountRequestSort={handleAccountRequestSort}\r\n              headAccountCells={headAccountCells}\r\n              headCustomerCells={headCustomerCells}\r\n              tabletype={tabletype}\r\n            />\r\n            <SolsticeTableBody\r\n              order={order}\r\n              orderBy={\r\n                tabletype === \"customer\" ? orderByCustomer : orderByAccount\r\n              }\r\n              page={page}\r\n              rows={tabletype === \"customer\" ? customers : accounts}\r\n              rowsPerPage={rowsPerPage}\r\n              tabletype={tabletype}\r\n            />\r\n            <TablePagination\r\n              rowsPerPageOptions={[5, 10, 25]}\r\n              component=\"div\"\r\n              count={customers.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n          </TableContainer>\r\n        </Paper>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { AccountTable } from \"./features/tableState/AccountTable\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n  rootApp: {\r\n    background: \"yellow\",\r\n    minHeight: \"100vh\",\r\n    width: \"100vw\",\r\n  },\r\n  tableGridContainer: {\r\n    paddingTop: \"5em\",\r\n  },\r\n});\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  return (\r\n    <Grid container className={classes.rootApp}>\r\n      <Grid item xs={12}>\r\n        <Grid container className={classes.tableGridContainer} justify=\"center\">\r\n          <Grid item>\r\n            <AccountTable />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\r\nimport tableStateReducer from \"../features/tableState/tableStateSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    tableState: tableStateReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}